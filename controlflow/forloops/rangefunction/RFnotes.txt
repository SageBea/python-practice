To loop through a set of code a specified number of times - use range ( ) function.

Annotation: why Parenthesis?
            ( ) are used for functions, grouping, and tuples


range () function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default) and ends at a specific number.

Annotation: Can i change the start,and its increments? 
            yes



*Basic Counting Loop
ex: pythonfoundations/controlflow/forloops/rangefunction/rangefuntion101.py
/Users/sagebeastly/VSPlayground/pythonfoundations/controlflow/forloops/rangefunction/rangefuntion101.py

for x in range(6):
    print(x) 

range(6) would mean the values 0 to 5
output: 0 1 2 3 4
When/Why: Use this when you want to repeat something a certain number of times, 
like printing or calculating 5 times.



* to change the starting parameter
ex: pythonfoundations/controlflow/forloops/rangefunction/rf-startingparameter101.py
/Users/sagebeastly/VSPlayground/pythonfoundations/controlflow/forloops/rangefunction/rf-startingparameter101.py

for x in range(2,6 ):
    print(x)

range(2, 6) means values from 2 to 6 but not including 6
Output 2 3 4 5
When/Why: Use this when you don’t want to start at zero — for example, iterating through a specific 
section of numbers.



*  to use a step value
ex: pythonfoundations/controlflow/forloops/rangefunction/rf-incrementsequence.py
/Users/sagebeastly/VSPlayground/pythonfoundations/controlflow/forloops/rangefunction/rf-incrementsequence.py

for x in range(2,30,3):
    print(x)

range(2,30,3) specify the increment value by adding a third parameter
output: 2 5 8 ...

When/Why: The third number (2) is the step size. Use it when you want to skip numbers or move in 
increments — useful for even/odd loops or time intervals.

Annotation: Will adding more parameters mean different things or destroy the "syntax".
for now; (starting parameter,the number of loops i think,and its increments.)
            Range(Start, stop, step) anything more destroys syntax 



*  Looping backward
for x in range(10, 0,-1):
    print (i)
output: 10, 9, 8 ... 0
- notice not from 9 to 0 like above. 10 is still the staring range and it will never print the 2nd
"stop" parameter
The negative step (-1)makes the loop count down - great for countdoens or reverse iterations


* Looping through a list
fruits = ["apple", "banana", "Cherry"]
for i in range(len(fruits)):
    print (i, fruits [i])

output: 0 apple
        1 banana
        2 Cherry
Range(len(list)) lets me loop though both index and value

annotations: why the many symbols?
- [] and () for used for specific things and must be carried through out the script.
? language: in the line fruits[i], the [] is saying "get the item at index i,"
and in len(fruits), the () is saying "call the function  len  and give ir fruits as an arguement."




Annotation: just one number in the range means it loops starting at 0 to the x-1,because 0 value means 
it loops zero times. yet,some houw its still an actual outcome...
why would anything loop zero- what whould that look like?
            zero is the first position in programming. programming counts position not quantities. zero
            doesnt mean nothing.

*Looping zero times
for i in range(0):
    print(i)

- nothing happens, it skips the loop because the range is empty. it auto matically starts at 0 so to leave it at zero 
is diff from Range(8) output:0,1,..8
will be useful  for logic that depends on variable values.








The range() function in Python generates a sequence of numbers and is most often used in for loops 
to control how many times a loop runs. It can take one, two, or three arguments: range(stop), 
range(start, stop), or range(start, stop, step). This makes it useful for counting, iterating 
through lists by index, skipping numbers, or running tasks a specific number of times.
